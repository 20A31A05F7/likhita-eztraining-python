#Happy number
#4,16,37,58,89,145
def happy(n):
    s=r=0
    while(n>=0):
        for i in range(len(str(n))+1):
            r=n%10
            s=s+r**2
            n=n//10
        return s
n=int(input("enter a number:"))
res=n
while(res!=1 and res!=4):
    res=happy(res)
if res==1:
    print("happy number")
else:
    print("not a happy number")


#encapsulation- protected
class encap():
    _a=123
    c=20
    def encapfunction(self):
        _b=200
        print("protected")
        print(self._a+10)
obj=encap()
obj.encapfunction()
print(obj._a)
print(obj.c)

#private
class encap():
    __a=10
    print(__a)
    def encapfunction(self):
        print("Encap - private")
        print(self.__a)
obj=encap()
obj.encapfunction()
print(obj.__a)  #will throw an error bcoz a is private,cant be accessed outside class

#POLYMORPHISM

#method overloading
class overload():
    def display(self,a=None,b=None):
        print(a,b)
obj=overload()
print("without arg")
obj.display()
print("with all arg")
obj.display(1,2)
print("with one arg")
obj.display(90)
        
#method Overriding
class parent():
    #constructor
    def __init__(self):
        self.value="Inside Parent"

    #parent's show method
    def show(self):
        print(self.value)

#Defining child class
class child(parent):
    #constructor
    def __init__(self):
        self.value="Inside child"

    #child's show method
        def show(self):
            print(self.value)
obj1=parent()
obj2=child()
obj1.show()
obj2.show()
        
#polymorphism - program

class kkd():
    def placename(self):
        print("kkd - jntuk")
    def student(self):
        print("yes-kkd")
    def which_year(self):
        print("3rd year")
class hyd():
    def placename(self):
        print("hyd")
    def student(self):
        print("yes-hyd")
    def which_year(self):
        print("3rd year")
obj_kkd=kkd()
obj_hyd=hyd()
for details in (obj_kkd,obj_hyd):
    details.placename()
    details.student()
    details.which_year()



#---------------------data structures------------------------------


#program to create a linked list
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlell:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head #temp is the first node
            while temp:
                print(temp.data,"-->",end=" ")
                temp=temp.next#establishing the link
obj=singlell()
#node creation-initialisation
n=node(10)
obj.head=n  #n data will in node class will be 10
n1=node(20) #assigning first node as head
obj.head.next=n1  
n2=node(30)     #next node value
n1.next=n2
obj.display()

#linked list in the jumbled oreder
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelnkdlst:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"-->",end=" ")
                temp=temp.next
obj=singlelnkdlst()
n=node('W')
obj.head=n
n1=node('I')
obj.head.next=n1
n2=node('N')
n1.next=n2
n3=node('N')
n2.next=n3
n4=node('E')
n3.next=n4
n5=node('R')
n4.next=n5
obj.display()


#linked list for adding at the bginning
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelnkdlst():
    def __init__(self):
        self.head=None
    def insert_beginning(self,data):
        nb=node(data)
        nb.next=self.head
        self.head=nb
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"-->",end=" ")
                temp=temp.next
obj=singlelnkdlst()
n=node(10)
obj.head=n
n1=node(20)
obj.head.next=n1
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
print("Before inserting")
obj.display()
print(" ")
print("After inserting")            
obj.insert_beginning(100)
obj.display()
print(" ")
print("After inserting")
obj.insert_beginning(555)
obj.display()


#linked list to add at the end of the beginning

class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelnkdlst():
    def __init__(self):
        self.head=None
    def insert_end(self,data):
        ne=node(data)
        temp=self.head
        while temp.next:
            temp=temp.next
        temp.next=ne
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"-->",end=" ")
                temp=temp.next
obj=singlelnkdlst()
n=node(10)
obj.head=n
n1=node(20)
obj.head.next=n1
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
print("Before inserting")
obj.display()
print(" ")
print("After inserting")            
obj.insert_end(100)
obj.display()
print(" ")
print("After inserting")
obj.insert_end(555)
obj.display()




class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelnkdlst():
    def __init__(self):
        self.head=None
    def insert_position(self,pos,data):
        np=node(data)
        temp=self.head
        for i in range(pos-1):
            temp=temp.next
            #np.data=data is not required
            np.next=temp.next
            temp.next=np
    def display(self):
        if self.head is None:
            print("Linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data,"-->",end=" ")
                temp=temp.next
obj=singlelnkdlst()
n=node(10)
obj.head=n
n1=node(20)
obj.head.next=n1
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
print("Before inserting")
obj.display()
print(" ")
print("After inserting")            
obj.insert_position(2,100)
obj.display()

#linkedlist insetion with user inpout

class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class snglelnkdlst:
    self.head=None
    self.last_node=None
    def append(self,data):
        if self.last_node is None:
            self.head=node(data)
            self.last_node=self.head
        else:
            self.las_node.next=node(data)
            self.last_node=self.last_node.next
    def display(self):
        current=self.head
        while current is not None:
            print(current,data,end=" ")
            current=current.next
a_list=linkedlist()
n=int(input("how many items would you like to add"))
for i in range(n):
    data=int(input("Enter the numbers:"))
    a_list.append(data)
print("The linked list:",end=" ")
a_list.display() 