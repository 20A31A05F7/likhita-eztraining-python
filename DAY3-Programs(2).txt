#creating a linked list and insertion,in ascending order,deletion
#one program with multiple concepts
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class Linkedlist:

    def __init__(self):
        self.head=None


    def printlist(self):
        temp=self.head
        if not temp:
            print("list is empty")
            return
        else:
            print("start:",end=" ")
        while temp:
            print(temp.data,end="->")
            temp=temp.next
        print('end.')


    def insert(self,data):
        new_node=Node(data)

        #if the linked list is empty
        if self.head is None:
            self.head=new_node

        #if the data is smaller than the head
        elif self.head.data >= new_node.data:
            new_node.next = self.head
            self.head=new_node

        else:
            #locate the node before the insertion
            current=self.head
            while current.next and new_node.data > current.next.data:
                current=current.next

            #insertion
            new_node.next=current.next
            current.next = new_node

    def delete(self,key):
        #if the list is empty
        if self.head is None:
            print("Deletion Error: The list is empty")
            return

        #if the key is in head
        if self.head.data == key:
            self.head=self.head.next
            return
        #find position of first occurence
        current=self.head
        while current:
            if current.data==key:
                break
            previous = current
            current= current.next

        #if the key was not found
        if current is None:
            print("Deletion Error: Key not found")
        else:
            previous.next= current.next
#__name is a python special variable
if __name__=='__main__':
    #create an object
    ll=Linkedlist()
    print('')
    #Insert some nodes
    ll.insert(10)
    ll.insert(12)
    ll.insert(8)
    ll.insert(11)
    ll.insert(10)

    ll.printlist()
    ll.delete(12)
    ll.delete(8)
    ll.delete(10)
    ll.printlist()




#creating own module
#function in my another file ,acting as a module here
import function
function.printing()


#will use in huge projects
#and give all function calls inside main

print("before function")
def f1():
    print("f1")
def f2():
    print("f2")
def f3()
    print("f3")
if __name__=='__main__':
    f1()
    f2()
    f3()
print("name:",__name__)




#-----------------------double linked list--------------------------

#create node
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("empty")
        else:
            temp=self.head
            while temp:
                 print(temp.data,"<-->",end=" ")
                 temp=temp.next
l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.display()

#insertion at end
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
    def __init__(self):
        self.head=None
    def insert_end(self):
        n=Node(300)
        temp=self.head
        while temp.next is not None:
            temp=temp.next
        temp.next=n
        n.prev=temp
        self.head=n
    def display(self):
        if self.head is None:
            print("empty")
        else:
            temp=self.head
            while temp:
                 print(temp.data,"<-->",end=" ")
                 temp=temp.next
l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.insert_end()
l.display()


#insertion at position
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None
class dll:
    def __init__(self):
        self.head=None
    def insert_pos(self,pos):
        n=Node(300)
        temp=self.head
        for i in range(1,pos-1):
            temp=temp.next
        n.prev=temp
        n.next=temp.next
        temp.next.prev=n
        temp.next=n
        
    def display(self):
        if self.head is None:
            print("empty")
        else:
            temp=self.head
            while temp:
                 print(temp.data,"<-->",end=" ")
                 temp=temp.next
l=dll()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.insert_pos(2)
l.display()


#deletion at position

class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None

class doublelinkedlist:
    def __init__(self):
        self.head=None
    def delete_position(self,pos):
        temp=self.head.next
        prev=self.head
        for i in range(1,pos-1):
            temp=temp.next
            prev=prev.next
        prev.next=temp.next
        temp.next=None
            
        
    def display(self):
        if self.head is None:
            print(" linked list is empty")
        else:
            temp=self.head
            while temp:
                 print(temp.data,"<-->",end=" ")
                 temp=temp.next
l=doublelinkedlist()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.delete_position(2)
l.display()

#deletion at end
class Node:
    def __init__(self,data):
        self.data=data
        self.previous=None
        self.next=None

class doublelinkedlist:
    def __init__(self):
        self.head=None
    def delete_end(self):
        temp=self.head.next
        prev=self.head
        while temp.next is not None:
            temp=temp.next
            prev=prev.next
        prev.next=None
            
        
    def display(self):
        if self.head is None:
            print(" linked list is empty")
        else:
            temp=self.head
            while temp:
                 print(temp.data,"<-->",end=" ")
                 temp=temp.next
l=doublelinkedlist()
n1=Node(100)
l.head=n1
n2=Node(200)
n2.prev=n1
n1.next=n2
l.delete_end()
l.display()



#----------------Circular linked list-------------------------------

#create a linked list ,ascending order,deletion
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class createlist:
    def __init__(self):
        self.head=Node(None)
        self.tail=Node(None)
        self.head.next=self.tail
        self.tail.next=self.head

        #Adding node at end of linkedlist
    def add(self,data):
        newnode=Node(data)
        #Is empty
        if self.head.data is None:
            self.head=newnode
            self.tail=newnode
            newnode.next=self.head
        else:
            self.tail.next=newnode
            self.tail=newnode
            #it is circular ll with only 1 element so tail point to head
            self.tail.next=self.head
    def display(self):
        current=self.head
        if self.head is None:
            print("List is empty")
            return
        else:
            print("Nodes of circular linked list:")
            print(current.data,"---->")
            while(current.next!=self.head):
                current=current.next
                print(current.data,"---->")
class circularlinkedlist:
    c1=createlist()
    c1.add("L")
    c1.add("I")
    c1.add("K")
    c1.add("K")
    c1.add("I")
    c1.display()
    
            
        
    
    

        

