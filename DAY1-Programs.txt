#Anonymous function

l=[1,2,3]

r=list(map(lambda x:x+x,l))
print(r)


#map- helps to create iteration

res=list(map(lambda l:pow(l,2),l))
print(res)

name="sam"
(lambda name:print(name))(name)


#write a program after creating a list with even numbers within the range 1 to 15 ,now apply lambda function and create a new list which should have square roots of the elements.
import math
l=[]
for i in range(1,15):
    if(i%2==0):
        l.append(i)
print(l)
r=map(lambda x:math.sqrt(x),l)
print(list(r))


#ABSTRACTION
from abc import ABC,abstractmethod
class abstractdemo(ABC):
       @abstractmethod #called decorator to make the method(function) abstract one
       def display(self):
           None
       @abstractmethod
       def show(self):
            None
#changing abstract to concrete
class demo(abstractdemo):
    def display(self):
        print("Abstraction method")
    def show(self):
        print("2nd function")
obj=demo()
obj.display()
obj.show()

#example
class A():
    n=int(input())
class B(A):
    def display(self):
        c=self.n+70
        print(c)
obj=B()
obj.display()

#multiple inheritance

class mom:
    def mdisplay(self):
        print("mom class")
class dad:
    def ddisplay(self):
        print("dad class")
class child(mom,dad):
    def cdisplay(self):
        print("child class")
c1=child()
c1.cdisplay()
c1.ddisplay()
c1.mdisplay()'''


#multilevel inheritance

class grandparent:
    def vuw(self):
        print("grand Parent class")
class parent(grandparent):
    def chow(self):
        print("parent class")
class child(parent):
    def display(self):
        print("child class")
c=child()
c.display()
c.chow()
c.vuw()

#Hybrid inheritance
class parent:
    def display(self):
        print("parent class")
class child1(parent):
    def clshow(self):
        print("child1")
class child2(parent):
    def c2show(self):
        print("child2")
class kid1(child1):
    def k1display(self):
        print("kid1 class")
class kid2(child2):
    def k2display(self):
        print("kid2 class")
class kidd1(child2):
    def k1show(self):
        print("kidd1 class")
class kidd2(child2):
    def k2show(self):
        print("kidd2 class")
c1=kid1()
c1.k1display()
c1.display()
c2=kid2()